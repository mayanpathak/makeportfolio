import { type Metadata } from "next";
import { getIdThroughSlug, getThemeNameApi } from "@/app/actions/portfolio";

export const runtime = "nodejs";

export async function generateMetadata({ params }: any): Promise<Metadata> {
  try {
    // First check if it's a UUID
    const isUUID = (str: string) =>
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
        str
      );

    let portfolioId = params.portfolioId;

    // If not UUID, try to get ID through slug
    if (!isUUID(portfolioId)) {
      const response = await getIdThroughSlug({ slug: portfolioId });
      if (response.success && response.portfolioId) {
        portfolioId = response.portfolioId;
      }
    }

    // Fetch theme data which contains SEO settings
    const themeResult = await getThemeNameApi({ portfolioId });

    if (themeResult.success && themeResult.data?.content) {
      const content = themeResult.data.content as any;
      const seoSection = content.sections?.find(
        (section: any) => section.type === "seo"
      );

      if (seoSection?.data) {
        // Determine favicon type
        let faviconType = "image/x-icon";
        if (seoSection.data.favicon) {
          if (seoSection.data.favicon.endsWith(".png"))
            faviconType = "image/png";
          else if (seoSection.data.favicon.endsWith(".svg"))
            faviconType = "image/svg+xml";
          else if (seoSection.data.favicon.endsWith(".ico"))
            faviconType = "image/x-icon";
        }
        return {
          title: seoSection.data.title || "Portfolio",
          description:
            seoSection.data.description || "Generated by create next app",
          icons: {
            icon: [
              { url: seoSection.data.favicon || "/favicon.ico", type: faviconType }
            ]
          }
        };
      }
    }
  } catch (error) {
    console.error("Error generating metadata:", error);
  }

  // Fallback metadata
  return {
    title: "Portfolio",
    description: "Generated by create next app",
  };
}

export default function RootLayout({
  children,
  params,
}: any) {
  return (
    <div className="antialiased" suppressHydrationWarning>
      {children}
    </div>
  );
}
